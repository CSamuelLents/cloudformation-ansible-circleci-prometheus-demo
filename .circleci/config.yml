version: 2.1

defaults: &defaults
  working_directory: ~/project
  docker:
    - image: circleci/node:13.8.0

orbs:
  slack: circleci/slack@4.2.0

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    # parameters:
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    # parameters:
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi

jobs:
  build-frontend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-deps-{{ checksum "frontend/package-lock.json" }}
      - run:
          name: Install dependencies
          command: |
            set -e
            npm --prefix ./frontend install
      - run:
          name: Build front-end
          command: |
            set -e
            npm --prefix ./frontend run build
      - save_cache:
          key: frontend-deps-{{ checksum "frontend/package-lock.json" }}
          paths:
            - frontend/node_modules
      - slack/notify:
          event: fail
          mentions: '@here'
          template: basic_fail_1
          branch_pattern: main

  build-backend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-deps-{{ checksum "backend/package-lock.json" }}
      - run:
          name: Install dependencies
          command: |
            set -e
            npm --prefix ./backend install
      - run:
          name: Back-end build
          command: |
            set -e
            npm --prefix ./backend run build
      - save_cache:
          key: backend-deps-{{ checksum "backend/package-lock.json" }}
          paths:
            - backend/node_modules
      - slack/notify:
          event: fail
          mentions: '@here'
          template: basic_fail_1
          branch_pattern: main

  test-frontend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-deps-{{ checksum "frontend/package-lock.json" }}
      - run:
          name: Install dependencies
          command: |
            set -e
            npm --prefix ./frontend install
      - run:
          name: Front-end tests
          command: |
            set -e
            npm --prefix ./frontend run test
      - slack/notify:
          event: fail
          mentions: '@here'
          template: basic_fail_1
          branch_pattern: main

  test-backend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-deps-{{ checksum "backend/package-lock.json" }}
      - run:
          name: Install dependencies
          command: |
            set -e
            npm --prefix ./backend install
      - run:
          name: Back-end tests
          command: |
            set -e
            npm --prefix ./backend run test
      - slack/notify:
          event: fail
          mentions: '@here'
          template: basic_fail_1
          branch_pattern: main

  scan-frontend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-deps-{{ checksum "frontend/package-lock.json" }}
      - run:
          name: Install dependencies
          command: |
            set -e
            npm --prefix ./frontend install
      - run:
          name: Scan frontend for vulnerabilities
          command: |
            set -e
            npm --prefix ./frontend audit --audit-level=critical
      - slack/notify:
          event: fail
          mentions: '@here'
          template: basic_fail_1
          branch_pattern: main

  scan-backend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-deps-{{ checksum "backend/package-lock.json" }}
      - run:
          name: Install dependencies
          command: |
            set -e
            npm --prefix ./backend install
      - run:
          name: Scan backend for vulnerabilities
          command: |
            set -e
            npm --prefix ./backend audit --audit-level=critical
      - slack/notify:
          event: fail
          mentions: '@here'
          template: basic_fail_1
          branch_pattern: main

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install dependencies
          command: yum install tar -y && yum install gzip -y
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project="udapeople" \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project="udapeople" \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --query "Reservations[*].Instances[*].{PublicIP:PublicIpAddress}"  \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)

            echo "$BACKEND_IP" >> ~/project/.circleci/ansible/inventory.txt

            curl -H "Content-Type: text/plain" \
              -H "token: faaf85f2-aae3-4bc1-9f30-09e897658cd8" \
              --request PUT \
              --data "$BACKEND_IP" https://api.memstash.io/values/backend-ip
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ['56:02:0b:eb:99:7d:6a:1d:80:b3:7d:f9:ac:b0:ce:c8']
      - run:
          name: Install dependencies
          command: apk add --update ansible
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/playbook.yml
# Here's where you will add some code to rollback on failure
#   run-migrations:
#     docker:
#       # Docker image here that supports NodeJS
#     steps:
#       # Checkout code from git
#       - run:
#           name: Run migrations
#           command: |
#             # Your code here
#             exit 1
#       - run:
#           name: Send migration results to memstash
#           command: |
#             # Your code here
#             exit 1
#       # Here's where you will add some code to rollback on failure

#   deploy-frontend:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#             export API_URL=$(curl -H "token: faaf85f2-aae3-4bc1-9f30-09e897658cd8" \
#                --request GET https://api.memstash.io/values/backend-ip)
#             echo "${API_URL}"
#       - run:
#           name: Deploy frontend objects
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure

#   deploy-backend:
#     docker:
#       # Docker image here that supports Ansible
#     steps:
#       # Checkout code from git
#       # Add ssh keys with fingerprint
#       # attach workspace
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Deploy backend
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure

#   smoke-test:
#     docker:
#       # Lightweight Docker image
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure

# cleanup:
#   docker:
#     # Docker image here
#   steps:
#     # Checkout code from git
#     - run:
#         name: Get old stack workflow id
#         command: |
#           # your code here
#           export OldWorkflowID="the id here"
#           export STACKS=[] #put the list of stacks here
#     - run:
#         name: Remove old stacks and files
#         command: |
#           if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#           then
#             # your code here
#           fi

workflows:
  default:
    jobs:
      - build-frontend:
          context: 'Slack Integration'
      - build-backend:
          context: 'Slack Integration'
      - test-frontend:
          requires: [build-frontend]
          context: 'Slack Integration'
      - test-backend:
          requires: [build-backend]
          context: 'Slack Integration'
      - scan-frontend:
          requires: [build-frontend]
          context: 'Slack Integration'
      - scan-backend:
          requires: [build-backend]
          context: 'Slack Integration'
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
