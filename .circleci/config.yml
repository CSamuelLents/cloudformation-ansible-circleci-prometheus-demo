version: 2.1

defaults: &defaults
  working_directory: ~/project
  docker:
    - image: cimg/node:lts

orbs:
  slack: circleci/slack@4.2.0
  aws: circleci/aws-cli@2.0.0

commands:
  destroy-environment:
    description: Destroy backend and front-end cloudformation stacks with a specific workflow ID.
    steps:
      - run:
          name: Ensure aws-cli is present
          when: on_fail
          command: |
            echo "Checking if aws-cli is installed..."

            if ! [ -x "$(command -v aws)" ]; then
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "aws_cli_v2.zip"
              unzip aws_cli_v2.zip
              sudo ./aws/install
            fi
      - run:
          name: Destroy environment
          when: on_fail
          command: |
            echo "Deployment failed - destroying environment with workflow id ${CIRCLE_WORKFLOW_ID:0:7}"

            if aws s3api head-bucket --bucket "udapeople-${CIRCLE_WORKFLOW_ID:0:7}" 2>/dev/null; then
              aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            fi

            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl -H "Content-Type: text/plain" \
              -H "token: faaf85f2-aae3-4bc1-9f30-09e897658cd8" \
              --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7})

            if [[ $SUCCESS == 1 ]] ; then
              set -e
              npm --prefix ~/project/backend install
              npm --prefix ~/project/backend run premigrations:revert
              npm --prefix ~/project/backend run migrations:revert
            fi

jobs:
  build-frontend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-deps-{{ checksum "frontend/package-lock.json" }}
      - run:
          name: Install dependencies
          command: |
            set -e
            npm --prefix ~/project/frontend install
      - run:
          name: Build front-end
          command: |
            set -e
            npm --prefix ~/project/frontend run build
      - save_cache:
          key: frontend-deps-{{ checksum "frontend/package-lock.json" }}
          paths:
            - frontend/node_modules
      - slack/notify:
          event: fail
          mentions: '@here'
          template: basic_fail_1
          branch_pattern: main

  build-backend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-deps-{{ checksum "backend/package-lock.json" }}
      - run:
          name: Install dependencies
          command: |
            set -e
            npm --prefix ~/project/backend install
      - run:
          name: Backend build
          command: |
            set -e
            npm --prefix ~/project/backend run build
      - save_cache:
          key: backend-deps-{{ checksum "backend/package-lock.json" }}
          paths:
            - backend/node_modules
      - slack/notify:
          event: fail
          mentions: '@here'
          template: basic_fail_1
          branch_pattern: main

  test-frontend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-deps-{{ checksum "frontend/package-lock.json" }}
      - run:
          name: Install dependencies
          command: |
            set -e
            npm --prefix ~/project/frontend install
      - run:
          name: Front-end tests
          command: |
            set -e
            npm --prefix ~/project/frontend run test
      - slack/notify:
          event: fail
          mentions: '@here'
          template: basic_fail_1
          branch_pattern: main

  test-backend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-deps-{{ checksum "backend/package-lock.json" }}
      - run:
          name: Install dependencies
          command: |
            set -e
            npm --prefix ~/project/backend install
      - run:
          name: Backend tests
          command: |
            set -e
            npm --prefix ~/project/backend run test
      - slack/notify:
          event: fail
          mentions: '@here'
          template: basic_fail_1
          branch_pattern: main

  scan-frontend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-deps-{{ checksum "frontend/package-lock.json" }}
      - run:
          name: Install dependencies
          command: |
            set -e
            npm --prefix ~/project/frontend install
      - run:
          name: Scan frontend for vulnerabilities
          command: |
            set -e
            npm --prefix ~/project/frontend audit --audit-level=critical
      - slack/notify:
          event: fail
          mentions: '@here'
          template: basic_fail_1
          branch_pattern: main

  scan-backend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-deps-{{ checksum "backend/package-lock.json" }}
      - run:
          name: Install dependencies
          command: |
            set -e
            npm --prefix ~/project/backend install
      - run:
          name: Scan backend for vulnerabilities
          command: |
            set -e
            # npm --prefix ~/project/backend audit --audit-level=critical
      - slack/notify:
          event: fail
          mentions: '@here'
          template: basic_fail_1
          branch_pattern: main

  deploy-infrastructure:
    docker:
      - image: cimg/base:edge-20.04
    steps:
      - checkout
      - aws/setup:
          profile-name: default
      - run:
          name: Ensure backend infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file ~/project/.circleci/files/backend.yml \
              --tags project="udapeople" \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file ~/project/.circleci/files/frontend.yml \
              --tags project="udapeople" \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add backend ip to ansible inventory
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --query "Reservations[*].Instances[*].{PublicIP:PublicIpAddress}"  \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            echo "$BACKEND_IP" >> ~/project/.circleci/ansible/inventory.txt
      - run:
          name: Save backend ip to memstash
          command: |
            curl -H "Content-Type: text/plain" \
              -H "token: faaf85f2-aae3-4bc1-9f30-09e897658cd8" \
              --request PUT \
              --data "$BACKEND_IP" https://api.memstash.io/values/backend-ip
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: cimg/python:3.9.2
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ['56:02:0b:eb:99:7d:6a:1d:80:b3:7d:f9:ac:b0:ce:c8']
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: pip3 install ansible --user ansible
      - run:
          name: Configure server
          command: |
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/configure-server.yml
      - destroy-environment

  run-migrations:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-deps-{{ checksum "backend/package-lock.json" }}
      - run:
          name: Install dependencies
          command: |
            set -e
            npm --prefix ~/project/backend install
      - run:
          name: Run migrations
          command: |
            set -e
            npm --prefix ~/project/backend install
            npm --prefix ~/project/backend run premigrations
            export MIGRATION_OUTPUT=$(npm --prefix ~/project/backend run migrations | grep -q "has been executed successfully" ; echo $?)
      - run:
          name: Send migration results to memstash
          command: |
            curl -H "Content-Type: text/plain" \
              -H "token: faaf85f2-aae3-4bc1-9f30-09e897658cd8" \
              --request PUT \
              --data "$MIGRATION_OUTPUT" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
      - destroy-environment

  deploy-frontend:
    <<: *defaults
    steps:
      - checkout
      - aws/setup:
          profile-name: default
      - restore_cache:
          keys:
            - frontend-deps-{{ checksum "frontend/package-lock.json" }}
      - run:
          name: Install dependencies
          command: |
            set -e
            npm --prefix ~/project/frontend install
      - run:
          name: Get backend url for build env
          command: |
            BACKEND_IP=$(curl -H "token: faaf85f2-aae3-4bc1-9f30-09e897658cd8" \
               --request GET https://api.memstash.io/values/backend-ip)
            export API_URL=https://"$BACKEND_IP":3000
            echo "${API_URL}"
      - run:
          name: Build frontend
          command: |
            set -e
            npm --prefix ~/project/frontend run build
      - run:
          name: Deploy frontend
          command: aws s3 sync ~/project/frontend/dist s3://"udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --delete
      - revert-migrations
      - destroy-environment

  deploy-backend:
    docker:
      - image: cimg/python:3.9.2-node
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ['56:02:0b:eb:99:7d:6a:1d:80:b3:7d:f9:ac:b0:ce:c8']
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys:
            - backend-deps-{{ checksum "backend/package-lock.json" }}
      - run:
          name: Install ansible
          command: pip3 install ansible --user ansible
      - run:
          name: Install backend dependencies
          command: |
            set -e
            npm --prefix ~/project/backend install
      - run:
          name: Backend build
          command: |
            set -e
            npm --prefix ~/project/backend run build
            tar -czf backend.tar.gz backend
      - run:
          name: Deploy backend
          command: |
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -vv -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/deploy-backend.yml
      - revert-migrations
      - destroy-environment

  smoke-test:
    docker:
      - image: cimg/python:3.9.2
    steps:
      - checkout
      - run:
          name: Get backend URL
          command: |
            BACKEND_IP=$(curl -H "token: faaf85f2-aae3-4bc1-9f30-09e897658cd8" \
               --request GET https://api.memstash.io/values/backend-ip)
            export API_URL=http://"$BACKEND_IP":3030
      - run:
          name: Backend smoke test.
          command: |
            echo $(curl -s "$API_URL/api/status")

            if curl -s "$API_URL/api/status" | grep "error" ; then
              echo "Failed backend smoke test"
              exit 1
            else
              echo "Passed backend smoke test"
            fi
      - run:
          name: Frontend smoke test.
          command: |
            FRONTEND_URL=http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.us-east-2.amazonaws.com

            if curl -s "$FRONTEND_URL" | grep "Welcome" ; then
              echo "Passed frontend smoke test"
            else
              echo "Failed frontend smoke test"
              exit 1
            fi
      - revert-migrations
      - destroy-environment

  cloudfront-update:
    docker:
      - image: cimg/base:edge-20.04
    steps:
      - checkout
      - aws/setup:
          profile-name: default
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file ~/project/.circleci/files/cloudfront.yml \
              --stack-name udapeople-cloudfront \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - revert-migrations
      - destroy-environment

  cleanup:
    docker:
      - image: cimg/base:edge-20.04
    steps:
      - checkout
      - aws/setup:
          profile-name: default
      - run:
          name: Remove old stacks and files
          command: |
            export OLD_WORKFLOW_ID=$(aws cloudformation list-exports \
              --query "Exports[?Name=='WorkflowID'].Value" \
              --no-paginate --output text)

            export STACKS=$(aws cloudformation list-stacks \
              --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE \
              --no-paginate --output text)

            echo "Removing previous deployment assets with WorkflowID: $OLD_WORKFLOW_ID"

            if [[ "${STACKS[@]}" =~ "${OLD_WORKFLOW_ID}" ]] ; then
              if aws s3api head-bucket --bucket "udapeople-${OLD_WORKFLOW_ID}" 2>/dev/null; then
                aws s3 rm s3://udapeople-${OLD_WORKFLOW_ID} --recursive
              fi

              aws cloudformation delete-stack --stack-name "udapeople-backend-${OLD_WORKFLOW_ID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OLD_WORKFLOW_ID}"
            fi

workflows:
  default:
    jobs:
      - build-frontend:
          context: 'Slack Integration'
      - build-backend:
          context: 'Slack Integration'
      - test-frontend:
          requires: [build-frontend]
          context: 'Slack Integration'
      - test-backend:
          requires: [build-backend]
          context: 'Slack Integration'
      - scan-frontend:
          requires: [build-frontend]
          context: 'Slack Integration'
      - scan-backend:
          requires: [build-backend]
          context: 'Slack Integration'
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [deploy-infrastructure, run-migrations]
      - deploy-backend:
          requires: [configure-infrastructure, run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
